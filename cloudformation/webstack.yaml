# This template will provision the launch template and ASG

Parameters:
  parameterAMIID:
    Description: Enter the AMI ID from the category of free tier
    Type: AWS::EC2::Image::Id

  parameterEC2InstanceType:
    Description: Enter the EC2 instance type from the category of free tier
    Type: String
    AllowedValues:
      - t1.micro
      - t2.micro

  parameterIPForLoadBalancerAccess:
    Description: Enter the IP address(or range) of the HTTPS clients which can hit the Application Load Balancer(ALB). This is to add a layer of security by limiting HTTPS access to a specific number of clients. Failing to configure this parameter, a client with any IP address can access the ALB.
    Type: String

  parameterSSHKeyPair:
    Description: Enter the key-pair name which shall be used for SSH access
    Type: AWS::EC2::KeyPair::KeyName

  parameterIPForSSHAccess:
    Description: Enter the IP address(or range) of the ssh clients which can access the EC2 instance. This is to add a layer of security by limiting SSH access to a specific number of clients. Failing to configure this parameter, a client with any IP address can gain SSH access to the EC2 instance if he has the required key pair
    Type: String

  parameterSubnetID:
     Description: Enter the subnet IDs. These IDs will be used by the load balancer to route the traffic to the respective subnets and by the ASG to launch the ec2 instances in the respective subnets. You can specify only one subnet per Availability Zone. You must specify subnets from at least two Availability Zones to increase the availability of your load balancer.
     Type: 'List<AWS::EC2::Subnet::Id>'

  parameterVPCID:
    Description: Enter the ID of the VPC present in your AWS network
    Type: String

  parameterTLSCertificateARN:
     Description: Enter the TLS certificate ARN
     Type: String

  parameterCPUPolicyTargetValue:
    Description: The target utilization for the CPU metric
    Type: String
    Default: 30

  #parameterUserData:
  #  Description: script which will act as a userdata to initialize the EC2 instance during boot time
  #  Type: String


Resources:
  resourceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref parameterAMIID
        InstanceType: !Ref parameterEC2InstanceType
        KeyName: !Ref parameterSSHKeyPair
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: name
                Value: codedeploy
        SecurityGroupIds:
          - !GetAtt resourceSecurityGroupForEC2.GroupId
   #    SecurityGroupIds:                                      # import the security group from the vpc stack using the cross stack reference
   #      Fn::ImportValue:
   #         exportSecurityGroupForLoadBalancer
        IamInstanceProfile:
            Name: !Ref resourceEC2InstanceProfile
        #UserData: !Ref parameterUserData
        UserData:                 # Pipe symbol | in YAML places a newline character in every line followed. It makes our script readable.
           Fn::Base64: | 
               #!/bin/bash
               apt update -y
               apt install -y apt-transport-https ca-certificates curl software-properties-common
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
               add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
               apt update -y
               apt install -y docker-ce
               docker version
               echo "installing ruby"
               apt-get install -y ruby
               echo "downloading codedeploy agent"
               wget https://aws-codedeploy-ap-south-1.s3.ap-south-1.amazonaws.com/latest/install
               echo "providing executable permissions to the script"
               chmod +x ./install
               echo "installing codedeploy agent"
               ./install auto
               service codedeploy-agent start
               echo "checking the status of the codedeploy agent"
               service codedeploy-agent status
             
             

# Instance profile for EC2. It acts as a container for the role. An application running on an Amazon EC2 instance is abstracted from AWS by the virtualized operating system. Because of this extra separation, you need an additional step to assign an AWS role and its associated permissions to an Amazon EC2 instance and make them available to its applications. This extra step is the creation of an instance profile attached to the instance.
  resourceEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref resourceEC2Role


# IAM role for EC2 to gain S3 read-only access. This is required to fetch build artifacts from the S3 bucket during the Codedeploy operations.
  resourceEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess


# security group for the EC2 instance. Allows traffic on port 8080 only from the load balancer. Allows ssh access to defined clients on port 22
  resourceSecurityGroupForEC2:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allows traffic on port 8080 only from the Application Load Balancer(ALB). Allows ssh access to defined clients on port 22
        SecurityGroupIngress:
          - CidrIp: !Ref parameterIPForSSHAccess
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            #CidrIp: !Ref parameterIPForSSHAccess
          - SourceSecurityGroupId: !GetAtt resourceSecurityGroupForLoadBalancer.GroupId
            IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080


  resourceSecurityGroupForLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
     GroupDescription: Allows traffic on port 443 of ALB from the defined clients
     SecurityGroupIngress:
     - CidrIp: !Ref parameterIPForLoadBalancerAccess
       IpProtocol: tcp
       FromPort: 443
       ToPort: 443
    #  FromPort: 80
    #  ToPort: 80


# target group for a load balancer
  resourceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 25
      HealthCheckPath: '/user/healthcheck'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref parameterVPCID
     #       - Fn::ImportValue:        # import the VPC ID from the vpc stack using the cross stack reference
     #            exportVPC
      TargetType: instance
      #Targets:
       # - Id: !Ref resourceEC2
       #   Port: 8080


# create an Application Load Balancer
  resourceApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
         Ref: parameterSubnetID
   #     - Fn::ImportValue:
   #          exportPublicSubnet1
   #     - Fn::ImportValue:
   #          exportPublicSubnet2
      SecurityGroups:
       - !GetAtt resourceSecurityGroupForLoadBalancer.GroupId
  #   SecurityGroups:                   # import the security group from the vpc stack using the cross stack reference
  #      Fn::ImportValue:
  #         exportSecurityGroupForLoadBalancer


# TLS secured Listener for the Application Load Balancer
  resourceHTTPSALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref parameterTLSCertificateARN
      DefaultActions:
      - TargetGroupArn: !Ref resourceTargetGroup
        Type: forward
      LoadBalancerArn: !Ref resourceApplicationLoadBalancer
    # Port: 80
      Port: 443
      Protocol: HTTPS
   #  Protocol: HTTP


  resourceListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref resourceTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - '/user/travel'                         # /bacnetserver
      ListenerArn: !Ref resourceHTTPSALBListener
      Priority: 1


  resourceListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref resourceTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - '/admin'                            # /modbusserver
      ListenerArn: !Ref resourceHTTPSALBListener
      Priority: 2


  resourceListenerRule3:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
              MessageBody: 'You are at the base page. Three APIs are exposed namely /auth, /bacnetserver, /modbusserver '
              StatusCode: '200'
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - '/'                               # /
      ListenerArn: !Ref resourceHTTPSALBListener
      Priority: 3


  resourceListenerRule4:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref resourceTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - '/auth'                               # /auth
      ListenerArn: !Ref resourceHTTPSALBListener
      Priority: 4


# create an autoscaling group
  resourceAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
     VPCZoneIdentifier:    # A list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. Required to launch instances into a nondefault VPC. If you specify VPCZoneIdentifier with AvailabilityZones, the subnets that you specify for this property must reside in those Availability Zones. Import the subnets from the vpc stack.
        Ref: parameterSubnetID
   #    - Fn::ImportValue:
   #          exportPrivateSubnet1
   #    - Fn::ImportValue:
   #          exportPrivateSubnet2

     LaunchTemplate:
       LaunchTemplateId: !Ref resourceLaunchTemplate
       Version: !GetAtt resourceLaunchTemplate.LatestVersionNumber
     MaxSize: '1'
     MinSize: '1'
     DesiredCapacity: '1'
     TargetGroupARNs:
        - !Ref resourceTargetGroup


# create a target auto scaling policy
  resourceAutoscalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref resourceAutoscalingGroup
          #Fn::ImportValue: ASG-ID
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref parameterCPUPolicyTargetValue

        
Outputs:

  outputWebsiteURL:
    Description: URL to access the Django website through ALB
    Value: !Join [ "/", [ 'https:/', !GetAtt resourceApplicationLoadBalancer.DNSName ] ]

  outputASG:
    Description: Export ID of the ASG from this stack to another stack - cross stack reference
    Value: !Ref resourceAutoscalingGroup
    Export:
      Name: exportAutoScalingGroup-ID

  outputTargetGroup:
    Description: Export ID of the target group from this stack to another stack - cross stack reference
    Value: !Ref resourceTargetGroup
    Export:
      Name: exportTargetGroup-ID