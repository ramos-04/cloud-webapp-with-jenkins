# This template will provision the launch template and ASG

Parameters:
  parameterAMIID:
    Description: Enter the AMI ID from the category of free tier
    Type: AWS::EC2::Image::Id

  parameterEC2InstanceType:
    Description: Enter the EC2 instance type from the category of free tier
    Type: String
    AllowedValues:
      - t1.micro
      - t2.micro

  parameterSSHKeyPair:
    Description: Enter the key-pair name which shall be used for SSH access
    Type: AWS::EC2::KeyPair::KeyName

  parameterIPForSSHAccess:
    Description: Enter the IP address(or range) of the ssh clients which can access the EC2 instance. This is to add a layer of security by limiting SSH access to a specific number of clients. Failing to configure this parameter, a client with any IP address can gain SSH access to the EC2 instance if he has the required key pair
    Type: String
    Default: 0.0.0.0/0

  parameterSubnetID:
     Description: Enter the subnet IDs. These IDs will be used by the load balancer to route the traffic to the respective subnets and by the ASG to launch the ec2 instances in the respective subnets. You can specify only one subnet per Availability Zone. You must specify subnets from at least two Availability Zones to increase the availability of your load balancer.
     Type: 'List<AWS::EC2::Subnet::Id>'

  #parameterUserData:
  #  Description: script which will act as a userdata to initialize the EC2 instance during boot time
  #  Type: String

Resources:
  resourceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref parameterAMIID
        InstanceType: !Ref parameterEC2InstanceType
        KeyName: !Ref parameterSSHKeyPair
        SecurityGroupIds:
          - !GetAtt resourceSecurityGroupForEC2.GroupId
        IamInstanceProfile:
            Name: !Ref resourceEC2InstanceProfile
        #UserData: !Ref parameterUserData

# Instance profile for EC2. It acts as a container for the role. An application running on an Amazon EC2 instance is abstracted from AWS by the virtualized operating system. Because of this extra separation, you need an additional step to assign an AWS role and its associated permissions to an Amazon EC2 instance and make them available to its applications. This extra step is the creation of an instance profile attached to the instance.
  resourceEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref resourceEC2Role

# IAM role for EC2 to gain S3 read-only access. This is required to fetch build artifacts from the S3 bucket during the CodePipeline operations.
  resourceEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

# security group for the EC2 instance. Allows traffic on port 8080 only from the load balancer. Allows ssh access to defined clients on port 22
  resourceSecurityGroupForEC2:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allows traffic on port 8080 only from the Application Load Balancer(ALB). Allows ssh access to defined clients on port 22
        SecurityGroupIngress:
          - CidrIp: !Ref parameterIPForSSHAccess
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
          - CidrIp: !Ref parameterIPForSSHAccess
            IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080

# create an autoscaling group
  resourceAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
     VPCZoneIdentifier:
        Ref: parameterSubnetID
     LaunchTemplate:
       LaunchTemplateId: !Ref resourceLaunchTemplate
       Version: !GetAtt resourceLaunchTemplate.LatestVersionNumber
     MaxSize: '3'
     MinSize: '1'
     DesiredCapacity: '2'

Outputs:
  outputASG:
    Description: Export ID of the ASG from this stack to another stack - cross stack reference
    Value: !Ref resourceAutoscalingGroup
    Export:
      Name: ASG-ID