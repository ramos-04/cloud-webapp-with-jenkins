
# This yaml involves configurations to create an AWS stack of resources using cloudformation

Parameters:
  parameterIPForSSHAccess:
    Description: Enter the IP address(or range) of the ssh clients which can access the EC2 instance. This is to add a layer of security by limiting SSH access to a specific number of clients. Failing to configure this parameter, a client with any IP address can gain SSH access to the EC2 instance if he has the required key pair
    Type: String
    Default: 0.0.0.0/0




  parameterGitHubToken:
    Description: Enter the Github token which will provide repository access permissions to CodePipeline 
    Type: String





# create a S3 bucket to store the artifacts of CodePipeline operations
  resourceArtifactsS3Bucket:
#   DeletionPolicy: Retain
    Type: AWS::S3::Bucket


# create a service role for CodeBuild
  resourceCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codebuild.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess


# create a service role for CodeDeploy
  resourceCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codedeploy.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole


# create a service role for CodePipeline
  resourceCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codepipeline.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
      - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
      - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess


# create a CodeBuild project
  resourceCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/standard:4.0'
        Type: 'LINUX_CONTAINER'
        PrivilegedMode: 'true'
      Name: my-codebuild-project
      ServiceRole: !GetAtt resourceCodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10


# create a codedeploy application
  resourceCodeDeployApplication:
    Type: AWS::CodeDeploy::Application


# create a codedeploy deployment group
  resourceDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref resourceCodeDeployApplication
      ServiceRoleArn: !GetAtt resourceCodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:  
        - Key: Name
          Type: KEY_AND_VALUE
          Value: CodeDeploy


# create a CodePipeline
  resourceCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt resourceCodePipelineRole.Arn  
      ArtifactStore:
        Type: S3
        Location: !Ref resourceArtifactsS3Bucket
      Name: my-codepipeline
      DisableInboundStageTransitions: 
          - Reason: 'Disabling to save some coldbuild minutes'
            StageName: Build

      Stages:
        - Name: Source
          Actions:
            - Name: ApplicationSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                  Owner: ramos-04
                  Repo: cloud-project
                  PollForSourceChanges: 'false'
                  Branch: master
                  OAuthToken: !Ref parameterGitHubToken
              OutputArtifacts:
                  - Name: SourceArtifact

        - Name: Build
          Actions:
            - Name: ApplicationBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                  ProjectName: !Ref resourceCodeBuildProject
              InputArtifacts:
                  - Name: SourceArtifact
              OutputArtifacts:
                  - Name: BuildArtifact

        - Name: Deploy
          Actions:
            - Name: ApplicationDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                  ApplicationName: !Ref resourceCodeDeployApplication
                  DeploymentGroupName: !Ref resourceDeploymentGroup
              InputArtifacts:
                  - Name: BuildArtifact

# create a service role for AWS Lambda
  resourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

# create a Lambda function
  resourceLambda: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: "index.handler"
      Role: !GetAtt resourceLambdaRole.Arn

      Code:
        ZipFile: |
          import json
          import boto3

          clientCodePipeline = boto3.client('codepipeline')

          def handler(event, context):
    
               retListPipelines = clientCodePipeline.list_pipelines()
               print('\nListing pipelines:')
               print(retListPipelines)
    
               pipelineName = retListPipelines['pipelines'][0]['name']
               print('\nPipeline name:' + pipelineName)
    
               retPipelineExec = clientCodePipeline.start_pipeline_execution(name=pipelineName)
               print('\nstart_pipeline_execution response: ')
               print(retPipelineExec)
   
               pipelineExecID = retPipelineExec['pipelineExecutionId']
               print('\npipelineExecutionId:' + pipelineExecID)

               jsonData = {
                            "pipelineExecutionId": pipelineExecID
                          }

               return {
                'statusCode': 200,
                'body': json.dumps(jsonData)   
               }
          
      Runtime: "python3.6"
      Timeout: 10

# create a REST API in API Gateway
  resourceRootAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: my-apigateway
      Description: Gateway to expose REST APIs

# create a resource in API Gateway
  resourceFirstAPIGateway:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref resourceRootAPIGateway
      ParentId: !GetAtt 
        - resourceRootAPIGateway
        - RootResourceId
      PathPart: startpipeline


# create a METHOD in API Gateway
  resourceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Credentials: !GetAtt resourceRoleAPIGateway.Arn
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "resourceLambda.Arn"
      AuthorizationType: NONE
      ResourceId: !Ref resourceFirstAPIGateway
      RestApiId: !Ref resourceRootAPIGateway


# create a deployment in API Gateway
  resourceDeploymentAPIGateway:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - resourceMethod
    Properties:
      RestApiId: !Ref resourceRootAPIGateway
      StageName: dev


# create a service role for API Gateway
  resourceRoleAPIGateway:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'apigateway.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaFullAccess





Outputs:
  resourceWebsiteURL:
    Description: URL to access the Django website through ALB
    Value: !Join [ "/", [ 'https:/', !GetAtt resourceApplicationLoadBalancer.DNSName, user, travel ] ]

  resourceTriggerPipelineURL:
    Description: URL to trigger the startpipeline REST API through API Gateway
    Value: !Sub "https://${resourceRootAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/startpipeline"









